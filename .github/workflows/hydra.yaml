name: Build and Push to Hydra GARs

on:
  pull_request:
    types:
      - labeled
    branches:
      - development

env:
  SERVICE_NAMES: sd-webui-server


  
jobs:
  prepare-env:
    name: Prepare Env
    runs-on: ${{ (inputs.RUNNER) || 'ubuntu-latest' }}
    timeout-minutes: 2
    outputs:
      SERVICE_ACCOUNT: ${{ steps.variable.outputs.SERVICE_ACCOUNT }}
      OIDC_PROVIDER: ${{ steps.variable.outputs.OIDC_PROVIDER }}
      GAR_REPOSITORY: ${{ steps.variable.outputs.GAR_REPOSITORY }}
      ENV: ${{ steps.variable.outputs.ENV }}
      SLACK_WEBHOOK_URL: ${{ steps.variable.outputs.SLACK_WEBHOOK_URL }}
      LABEL: ${{ steps.check_label.outputs.LABEL }}

    steps:
      - name: Check label prefix
        id: check_label
        run: |
          label="${{ github.event.pull_request.labels[0].name }}"
          if [[ "$label" != epic-* ]]; then
            echo "Label does not start with 'epic-', skipping job."
            exit 0  
          fi
          echo "::set-output name=LABEL::$label"
  
      - id: variable
        if: steps.check_label.outputs.label
        uses: btg-pencil-ai/kube-deployment/workflows/composite/prepare-env-hydra@main

  build-push-image:
    name: Build and Push Image
    if: needs.prepare-env.outputs.label
    runs-on: '2nd-Large-Runner'
    timeout-minutes: 40
    permissions:
      id-token: write
      pull-requests: write
      contents: read
    needs: prepare-env
    env:
      SERVICE_ACCOUNT: ${{ needs.prepare-env.outputs.SERVICE_ACCOUNT }}
      OIDC_PROVIDER: ${{ needs.prepare-env.outputs.OIDC_PROVIDER }}
      ENV: ${{ needs.prepare-env.outputs.ENV }}
      GAR_REPOSITORY: ${{ needs.prepare-env.outputs.GAR_REPOSITORY }}
      LABEL: ${{ needs.prepare-env.outputs.LABEL }}

    steps:
      - name: check avaible size
        id: check-size-after
        shell: bash
        run: |
          df -h

      - uses: "actions/checkout@v4"

      - name: Set up Docker Context for Buildx
        id: buildx-context
        shell: bash
        run: |
          docker context create builders
  
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders
          driver: docker
  
      - uses: "google-github-actions/auth@v2"
        id: auth
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ vars[env.OIDC_PROVIDER] }}
          service_account: ${{ vars[env.SERVICE_ACCOUNT] }}

      - name: Login to Artifact Registry Europe
        uses: docker/login-action@v3.1.0
        with:
          registry: "europe-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
  
      - name: Get tag
        shell: bash
        id: get-image
        run: |
  
          IMAGE_TAG=${{ env.LABEL }}
  
          echo "IMAGE=${{ env.GCLOUD_PROJECT }}/${{ env.GAR_REPOSITORY }}/${{ env.SERVICE_NAMES}}:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ":sunny: Image -->  ${{ env.GCLOUD_PROJECT }}/${{ env.GAR_REPOSITORY }}/${{ env.SERVICE_NAMES}}:$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
  
      - name: Build and push to GAR
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: Dockerfile
          push: true
          no-cache: true
          platforms: linux/amd64
          provenance: false
          tags: |
            europe-docker.pkg.dev/${{ steps.get-image.outputs.IMAGE }}
  
### slack alert

  slack-notification:
    name: Slack Notification
    if: always()
    runs-on: ${{ (inputs.RUNNER) || 'ubuntu-latest' }}
    needs:
      - prepare-env
      - build-push-image
    env:
     SLACK_WEBHOOK_URL: ${{needs.prepare-env.outputs.SLACK_WEBHOOK_URL}}

    steps:
      - uses: technote-space/workflow-conclusion-action@v3.0.3
      - name: Update slack message body 
        shell: bash
        id: body
        run: |
          if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ]
          then
            echo "SLACK_MESSAGE=Success ✅" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'failure' ]
          then
            echo "SLACK_MESSAGE=Failed ❌" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'cancelled' ]
          then
            echo "SLACK_MESSAGE=Cancelled ⚠️" >> $GITHUB_OUTPUT
          fi
  
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://res.cloudinary.com/apideck/image/upload/w_196,f_auto/v1612401946/marketplaces/ckhg56iu1mkpc0b66vj7fsj3o/listings/k3l4ibtdajnvjqoclysf.png
          SLACK_MESSAGE: ${{ steps.body.outputs.SLACK_MESSAGE }}
          SLACK_TITLE: Build Status
          SLACK_FOOTER: '<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>'
          SLACK_USERNAME: Pencil-CI
          SLACK_WEBHOOK: ${{ vars[env.SLACK_WEBHOOK_URL] }}
