name: Production Release sd-webui-server

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version like v1.0.0"
        required: true
        type: string
      environment:
        description: "Environment (APP/PRO)"
        required: true
        type: choice
        default: "APP"
        options:
          - PRO
          - APP

env:
  WORKLOAD_NAME: sd-webui-server



concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}
  cancel-in-progress: true



jobs:
  validate-release-version:
    name: Validate Release Version
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 2
    steps:
      - name: Validate Release Version
        id: validate-release-version
        shell: bash
        run: |
          if [[ ! ${{ github.event.inputs.release_version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid release version. Please provide a valid release version like v1.0.0"
            exit 1
          fi
          if [[ ${{ github.ref }} != "refs/heads/main" ]]; then
            echo "Production release can only be triggered from main branch"
            exit 1
          fi
          echo "Release version is valid"
          echo ":rocket: Release Version --> ${{ github.event.inputs.release_version }}" >> $GITHUB_STEP_SUMMARY
          echo ":partly_sunny: Release Environment --> ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY

  build-image:
    name: Build Image
    needs: validate-release-version
    runs-on: "blacksmith-4vcpu-ubuntu-2204"
    permissions:
      id-token: write
      contents: read
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Context for Buildx
        shell: bash
        run: docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ vars.GOOGLE_OIDC_PROVIDER }}
          service_account: ${{ vars.GOOGLE_SERVICE_ACCOUNT }}

      - name: Login to Artifact Registry ASIA
        uses: docker/login-action@v3.1.0
        with:
          registry: "asia-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Login to Artifact Registry US
        uses: docker/login-action@v3.1.0
        with:
          registry: "us-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Login to Artifact Registry Europe
        uses: docker/login-action@v3.1.0
        with:
          registry: "europe-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set Image Tag
        shell: bash
        id: set-image
        run: |
          IMAGE_TAG=${{ github.event.inputs.release_version }}
          echo "IMAGE=${{ env.GCLOUD_PROJECT }}/${{ vars.GAR_REPOSITORY }}/${{ env.WORKLOAD_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ":sunny: Image -->  ${{ env.GCLOUD_PROJECT }}/${{ vars.GAR_REPOSITORY }}/${{ env.WORKLOAD_NAME }}:$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY

      - name: Build and push to GAR
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          provenance: false
          tags: |
            asia-docker.pkg.dev/${{ steps.set-image.outputs.IMAGE }}
            us-docker.pkg.dev/${{ steps.set-image.outputs.IMAGE }}
            europe-docker.pkg.dev/${{ steps.set-image.outputs.IMAGE }}

  slack-notification:
    name: Slack Notification
    if: always()
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs:
      - validate-release-version
      - build-image
    steps:
      - name: Send Slack Notification
        uses: btg-pencil-ai/kube-deployment/workflows/composite/slack-alert@main
        with:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
