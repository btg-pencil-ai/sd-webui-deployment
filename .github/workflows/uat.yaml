name: Build And Push to UAT

on:
  push:
    branches:
        - 'rc/*'

env:
  WORKLOAD_NAME: sd-webui-server


concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}
  cancel-in-progress: true

jobs:
  get-env:
    name: Get Environment Variables  ## due to this limitation https://github.com/actions/runner/issues/2372
    runs-on: ubuntu-latest  
    outputs:
      WORKLOAD_NAME: ${{ steps.get-env.outputs.WORKLOAD_NAME }}
      DOCKERFILE_CONTEXT_PATH: ${{ steps.get-env.outputs.DOCKERFILE_CONTEXT_PATH }}
      DOCKERFILE_PATH: ${{ steps.get-env.outputs.DOCKERFILE_PATH }}
      DOCKER_BUILDARGS: ${{ steps.get-env.outputs.DOCKER_BUILDARGS }}
      BUILD_RUNNER: ${{ steps.get-env.outputs.BUILD_RUNNER }}
    steps:
      - name: Get Environment Variables
        id: get-env
        run: |
          echo "WORKLOAD_NAME=${{ env.WORKLOAD_NAME }}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE_CONTEXT_PATH=${{ env.DOCKERFILE_CONTEXT_PATH }}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE_PATH=${{ env.DOCKERFILE_PATH }}" >> $GITHUB_OUTPUT
          echo "DOCKER_BUILDARGS=${{ env.DOCKER_BUILDARGS }}" >> $GITHUB_OUTPUT
          echo "BUILD_RUNNER=${{ env.BUILD_RUNNER }}" >> $GITHUB_OUTPUT

  build-push-image:
    name: Build and Push Image to UAT
    runs-on: "blacksmith-4vcpu-ubuntu-2204"
    needs: get-env
    permissions:
      id-token: write
      contents: read
    environment: 'UAT'
    timeout-minutes: 30
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PENCIL_ACTION_APPID }}
          private-key: ${{ secrets.PENCIL_ACTION_APP_PRIVATE_KEY }}  

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0   

      - name: Set up Docker Context for Buildx
        shell: bash
        run: docker context create builders  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders  

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ vars.GOOGLE_OIDC_PROVIDER }}
          service_account: ${{ vars.GOOGLE_SERVICE_ACCOUNT }}  

      - name: Login to Artifact Registry Europe
        uses: docker/login-action@v3.1.0
        with:
          registry: "europe-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}  

      - name: Set Image Tag
        shell: bash
        id: set-image
        run: |
          VERSION="${GITHUB_REF#refs/heads/rc/}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid release version in rc branch. Please provide a valid release version like rc/v1.0.0"
            exit 1
          fi          
          IMAGE_TAG="$VERSION-$GITHUB_SHA"
          echo "IMAGE=${{ env.GCLOUD_PROJECT }}/${{ vars.GAR_REPOSITORY }}/${{ env.WORKLOAD_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ":sunny: Image -->  ${{ env.GCLOUD_PROJECT }}/${{ vars.GAR_REPOSITORY }}/${{ env.WORKLOAD_NAME }}:$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY  

      - name: Build and push to GAR
        uses: docker/build-push-action@v5.1.0
        with:
          context: ${{ needs.get-env.outputs.DOCKERFILE_CONTEXT_PATH }}
          file: ${{ needs.get-env.outputs.DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64
          build-args: ${{ needs.get-env.outputs.DOCKER_BUILDARGS }}
          provenance: false
          secrets: |
            "gcp_access_token=${{ steps.auth.outputs.access_token }}"          
          tags: |
            europe-docker.pkg.dev/${{ steps.set-image.outputs.IMAGE }}  

  slack-notification:
    name: Slack Notification
    if: always()
    runs-on: ubuntu-latest
    needs:
      - build-push-image
    steps:
        - uses: technote-space/workflow-conclusion-action@v3.0.3
        - name: Update slack message body 
          shell: bash
          id: body
          run: |
            if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ]
            then
              echo "SLACK_MESSAGE=Success ✅" >> $GITHUB_OUTPUT
            elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'failure' ]
            then
              echo "SLACK_MESSAGE=Failed ❌" >> $GITHUB_OUTPUT
            elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'cancelled' ]
            then
              echo "SLACK_MESSAGE=Cancelled ⚠️" >> $GITHUB_OUTPUT
            fi
    
        - name: Slack Notification
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }} # or a specific color like 'good' or '#ff00ff'
            SLACK_ICON: https://res.cloudinary.com/apideck/image/upload/w_196,f_auto/v1612401946/marketplaces/ckhg56iu1mkpc0b66vj7fsj3o/listings/k3l4ibtdajnvjqoclysf.png
            SLACK_MESSAGE: ${{ steps.body.outputs.SLACK_MESSAGE }}
            SLACK_TITLE: Build Status
            SLACK_FOOTER: '<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>'
            SLACK_USERNAME: Pencil-CI
            SLACK_WEBHOOK: ${{ vars.UAT_SLACK_WEBHOOK_URL }}